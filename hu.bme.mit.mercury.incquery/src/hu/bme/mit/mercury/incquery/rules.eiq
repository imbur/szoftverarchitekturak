package hu.bme.mit.mercury.incquery

import "http://www.example.org/mercury"


@Constraint(targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", location = ds, severity = "error", message = "Orphan datasinks are not allowed")
pattern noOrphanDataSink(ds : DataSink) {
	neg find notOrphanDataSink(ds); 
	neg find dataSinkForEmptyDeclaration(ds);
}

pattern dataSinkForEmptyDeclaration(ds){
	FunctionBlock.outputVariables(fb,ds);
	neg find nonEmptyDeclaration(fb);
}

private pattern nonEmptyDeclaration(fb){
	FunctionBlock.functionCalls(fb,_);
}

pattern notOrphanDataSink(ds : DataSink) {
	DataSink.source(ds,_);
}

@Constraint(targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", location = fb, severity = "warning", message = "Function block is never used")
pattern warnUncalledFunctionBlock(fb: FunctionBlock){
	0 == count find uncalledFunctionBlock(fb);
}

pattern uncalledFunctionBlock(fb: FunctionBlock){
	FunctionBlock.calls(fb,_);
}


@Constraint(targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", location = fivr, severity = "error", message = "Wrong typed function block input variable is referenced")
pattern badFunctionBlockInputType(fivr : FunctionInputVariableReference) {
	InputVariable.type(iv, t1);
	InputVariable.target(iv, fivr);
	FunctionInputVariableReference.variable.type(fivr,t2);
	t1 != t2;
}

@Constraint(targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", location = ov, severity = "error", message = "Wrong typed function block output variable is referenced")
pattern badFunctionBlockOutputType(ov : OutputVariable) {
	OutputVariable.type(ov, t1);
	OutputVariable.source(ov, fovr);
	FunctionOutputVariableReference.variable.type(fovr,t2);
	t1 != t2;
}

@Constraint(targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", location = fivr, severity = "error", message = "Wrong typed program input variable is referenced")
pattern badProgramInputType(fivr : FunctionInputVariableReference) {
	ProgramInputVariable.type(piv, t1);
	ProgramInputVariable.target(piv, fivr);
	FunctionInputVariableReference.variable.type(fivr,t2);
	t1 != t2;
}

@Constraint(targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", location = pov, severity = "error", message = "Wrong typed program output variable is referenced")
pattern badProgramOutputType(pov : ProgramOutputVariable) {
	ProgramOutputVariable.type(pov, t1);
	ProgramOutputVariable.source(pov, fovr);
	FunctionOutputVariableReference.variable.type(fovr,t2);
	t1 != t2;
}

@Constraint(targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", location = fivr, severity = "error", message = "Wrong typed FunctionOutputVariableReference is referenced")
pattern badFunctionInputReferenceType(fivr : FunctionInputVariableReference) {
	FunctionInputVariableReference.variable.type(fivr, t1);
	FunctionInputVariableReference.source(fivr, fovr);
	FunctionOutputVariableReference.variable.type(fovr,t2);
	t1 != t2;
}

@Constraint(targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", location = p, severity = "error", message = "Name of the Programs in one AllocationUnit should be unique")
pattern nonUniqueProgramName(p : Program) {
	AllocationUnit.programs(a,p);
	AllocationUnit.programs(a,p1);
	Program.name(p, n);
	Program.name(p1, n);
	p != p1;
}

@Constraint(targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", location = fb, severity = "error", message = "Name of the FunctionBlocks in one AllocationUnit should be unique")
pattern nonUniqueFunctionBlockName (fb : FunctionBlock) {
	AllocationUnit.functionBlocks(a,fb);
	AllocationUnit.functionBlocks(a,fb1);
	FunctionBlock.name(fb, n);
	FunctionBlock.name(fb1, n);
	fb != fb1;
}

@Constraint(targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", location = iv, severity = "error", message = "InputVariables of a FunctionBlocks should have unique names")
pattern functionBlockInputVariableNameIsNotUnique (iv : InputVariable) 
{
FunctionBlock.inputVariables(fb, iv);
InputVariable.name(iv, n);

FunctionBlock.inputVariables(fb, iv1);
InputVariable.name(iv1, n);

iv != iv1;

} or {

FunctionBlock.inputVariables(fb, iv);
InputVariable.name(iv, n);

FunctionBlock.outputVariables(fb, ov);
OutputVariable.name(ov, n);

}

@Constraint(targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", location = ov, severity = "error", message = "OutputVariables of a FunctionBlocks should have unique names")
pattern functionBlockOutputVariableNameIsNotUnique (ov : OutputVariable) 
{
FunctionBlock.outputVariables(fb, ov);
OutputVariable.name(ov, n);

FunctionBlock.outputVariables(fb, ov1);
OutputVariable.name(ov1, n);

ov != ov1;

} or {

FunctionBlock.outputVariables(fb, ov);
OutputVariable.name(ov, n);

FunctionBlock.inputVariables(fb, iv);
InputVariable.name(iv, n);

}

@Constraint(targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", location = p, severity = "warning", message = "Useless Program definition. Program does not contain any function calls.")
pattern programWithoutFunctionCall (p : Program) {
	neg find programWithZeroFunctionCalls(p);
}

pattern programWithZeroFunctionCalls (p : Program) {
	0 != count find programFunctionCalls(p);
}

pattern programFunctionCalls (p : Program){
	Program.functionCalls(p,_);
}